# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.1

# commands:
#   notify_slack_error:
#     steps:
#       - slack/notify:
#           event: fail
#           template: basic_fail_1

#   notify_slack_pass:
#     steps:
#       - slack/notify:
#           event: pass
#           template: basic_success_1
# # jobs:
# #   notify:
# #     docker:
# #       - image: 'cimg/base:stable'
# # steps:
# #   - slack/notify:
# #       custom: |
# #         {
# #           "blocks": [
# #             {
# #               "type": "section",
# #               "fields": [
# #                 {
# #                   "type": "plain_text",
# #                   "text": "*This is a text notification*",
# #                   "emoji": true
# #                 }
# #               ]
# #             }
# #           ]
# #         }
# #       event: always

# executors:
#   app-executor: # refactoring file to use an executor for recurring codes
#     docker:
#       - image: cimg/node:16.13.1
#     working_directory: ~/repo
#   slack-executor:
#     docker:
#       - image: 'cimg/base:stable'

# # creating aliases (reusable variables) for repeating parts
# aliases:
#   - &show-current-branch-name
#     run:
#       name: Show current branch
#       command: echo ${CIRCLE_BRANCH}
#   - &restore-cache
#     restore_cache:
#       keys:
#         - app-{{ checksum "package.json" }}
#         - app-
#   - &install-dependencies
#     run:
#       name: Install dependencies
#       command: npm install
#   - &save-cache
#     save_cache:
#       paths:
#         - node_modules
#       key: app-{{ checksum "package.json" }}
#   - &install-aws-cli
#     run:
#       name: Installing AWS CLI
#       working_directory: /
#       command: | # pipe for writing multi-line commands
#         sudo apt-get -y -qq update
#         sudo apt-get install -y awscli
#         sudo apt-get install -y python3-pip python-dev build-essential
#   - &build-project
#     run:
#       name: Build Project
#       command: |
#         npm install
#         npm run build
#         cd build
#         zip ../build.zip -r * .[^.]*
#         echo "Build successful"

# jobs:
#   build:
#     executor: app-executor
#     steps:
#       - checkout # checkout the current branch
#       - *show-current-branch-name
#       - *restore-cache
#       - *install-dependencies
#       - *save-cache # save the node_modules

#   linting:
#     executor: app-executor
#     steps:
#       - checkout
#       - *show-current-branch-name
#       - *restore-cache
#       - run:
#           name: Run linting
#           command: npm run lint

#   prettier:
#     executor: app-executor
#     steps:
#       - checkout
#       - *show-current-branch-name
#       - *restore-cache
#       - run:
#           name: Run prettier check
#           command: npm run prettier:check

#   notify-slack-error:
#     executor: slack-executor
#     steps:
#       - run: echo $SLACK_ACCESS_TOKEN
#       - slack/notify:
#           event: fail
#           template: basic_fail_1
#           # message: "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete"

#   notify-slack-pass:
#     executor: slack-executor
#     steps:
#       - run: echo $SLACK_ACCESS_TOKEN
#       - slack/notify:
#           event: pass
#           template: basic_success_1

#   deploy-to-aws-s3:
#     executor: app-executor
#     steps:
#       - checkout
#       - *show-current-branch-name
#       - *install-aws-cli
#       - *build-project
#       - run:
#           name: Deploy to AWS S3
#           command: |
#             if [ "${CIRCLE_BRANCH}" == "main" ]
#             then
#               aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_PRODUCTION_BUCKET} --delete
#             elif [ "${CIRCLE_BRANCH}" == "staging" ]
#             then
#               aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --delete
#             else
#               aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
#             fi

#   deploy-to-aws-cloudfront:
#     executor: app-executor
#     steps:
#       - checkout
#       - *show-current-branch-name
#       - *install-aws-cli
#       - *build-project
#       - run:
#           name: Deploy to AWS Cloudfront
#           command: |
#             aws configure set preview.cloudfront true
#             if [ "${CIRCLE_BRANCH}" == "main" ]
#             then
#               aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
#             elif [ "${CIRCLE_BRANCH}" == "staging" ]
#             then
#               aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
#             else
#               aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
#             fi

# workflows:
#   build_and_deploy:
#     jobs:
#       - build
#       - linting:
#           requires:
#             - build
#           filters:
#             branches:
#               only:
#                 - development
#                 - staging
#                 - main
#       - prettier:
#           requires:
#             - build
#           filters:
#             branches:
#               only:
#                 - development
#                 - staging
#                 - main
#       - deploy-to-aws-s3:
#           requires:
#             - prettier
#           filters:
#             branches:
#               only:
#                 - development
#                 - staging
#                 - main
#       - deploy-to-aws-cloudfront:
#           requires:
#             - deploy-to-aws-s3
#           filters:
#             branches:
#               only:
#                 - development
#                 - staging
#                 - main
#       - notify-slack-pass:
#           requires:
#             - deploy-to-aws-cloudfront
#           filters:
#             branches:
#               only:
#                 - development
#                 - staging
#                 - main
#       - notify-slack-error:
#           requires:
#             - deploy-to-aws-cloudfront
#           filters:
#             branches:
#               only:
#                 - development
#                 - staging
#                 - main

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
workflows:
  send-notification:
    jobs:
      - notify:
          context: $SLACK_ACCESS_TOKENS
